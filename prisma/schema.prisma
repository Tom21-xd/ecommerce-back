generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int                @id @default(autoincrement())
  email      String             @unique
  password   String
  username   String
  phones     String? // Nuevo campo para n√∫mero de celular
  role       Role
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @default(now()) @updatedAt @map("updated_at")
  containers ProductContainer[]
  pedido     pedido[]
  Address    Address[]
  cart       cart[]
  review     review[]

  @@index([email])
}

model ProductContainer {
  id        Int       @id @default(autoincrement())
  name      String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  products  Product[]

  @@index([userId])
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  sku             String
  quantity        Int
  price           Decimal           @db.Decimal(12, 2)
  minStock        Int               @default(0)
  isActive        Boolean           @default(true)
  description     String?
  containerId     Int
  container       ProductContainer  @relation(fields: [containerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  unidadId        Int?
  marcaId         Int?
  unidad          unidad?           @relation(fields: [unidadId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  marca           marca?            @relation(fields: [marcaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  ProductCategory ProductCategory[]
  ProductImage    ProductImage[]
  cart_item       cart_item[]
  review          review[]
  pedido_producto detalle_pedido[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt

  @@unique([containerId, sku])
  @@index([isActive])
  @@index([containerId])
  @@index([unidadId])
  @@index([marcaId])
}

model unidad {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model marca {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model pedido {
  id              Int              @id @default(autoincrement())
  status          OrderStatus      @default(PENDING)
  precio_total    Decimal          @db.Decimal(12, 2)
  userId          Int
  user            User             @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  pedido_producto detalle_pedido[]
  pedido_address  pedido_address[]
  payment         payment[]
  shipment        shipment[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@index([userId, createdAt])
}

model detalle_pedido {
  id             Int      @id @default(autoincrement())
  pedidoId       Int
  productoId     Int
  cantidad       Int
  subtotal       Decimal  @db.Decimal(12, 2)
  nameAtPurchase String
  skuAtPurchase  String
  priceUnit      Decimal  @db.Decimal(12, 2)
  pedido         pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  producto       Product  @relation(fields: [productoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt      DateTime @default(now())

  @@index([pedidoId])
  @@index([productoId])
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name      String?
  fullName  String
  phone     String
  line1     String
  line2     String?
  city      String
  state     String?
  country   String   @default("CO")
  zip       String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isDefault])
}

model pedido_address {
  id        Int         @id @default(autoincrement())
  pedidoId  Int
  pedido    pedido      @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fullName  String
  phone     String
  line1     String
  line2     String?
  city      String
  state     String?
  country   String
  zip       String?
  type      AddressType @default(SHIPPING)
  createdAt DateTime    @default(now())

  @@index([pedidoId, type])
}

model shipment {
  id            Int            @id @default(autoincrement())
  pedidoId      Int
  pedido        pedido         @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status        ShipmentStatus @default(PENDING)
  carrier       String?
  trackingCode  String?
  cost          Decimal?       @db.Decimal(12, 2)
  estimatedDate DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime       @default(now())

  @@index([pedidoId, status])
}

model payment {
  id          Int           @id @default(autoincrement())
  pedidoId    Int
  pedido      pedido        @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  method      PaymentMethod @default(TRANSFER)
  status      PaymentStatus @default(PENDING)
  amount      Decimal       @db.Decimal(12, 2)
  currency    String        @default("COP")
  provider    String?
  providerRef String?
  evidenceUrl String?
  createdAt   DateTime      @default(now())

  @@index([pedidoId, status])
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  slug      String            @unique
  parentId  Int?
  parent    Category?         @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  children  Category[]        @relation("CategoryToCategory")
  products  ProductCategory[]
  createdAt DateTime          @default(now())

  @@index([parentId])
}

model ProductCategory {
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([productId, categoryId])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  base64    String
  alt       String?
  position  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([productId, position])
}

model cart {
  id        Int         @id @default(autoincrement())
  userId    Int?
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     cart_item[]
}

model cart_item {
  id         Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  qty        Int      @default(1)
  priceAtAdd Decimal  @db.Decimal(12, 2)
  cart       cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([productId])
}

model review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
  @@index([rating])
}

enum AddressType {
  SHIPPING
  BILLING
}

enum Role {
  SELLER
  BUYER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
  SHIPPED
  DELIVERED
  REFUNDED
}

enum PaymentMethod {
  CASH
  TRANSFER
  CARD
  GATEWAY
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

enum ShipmentStatus {
  NOT_REQUIRED
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
}

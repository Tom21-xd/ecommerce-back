generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                @id @default(autoincrement())
  email        String             @unique
  password     String
  username     String
  phones       String? // Nuevo campo para número de celular
  role         Role
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @default(now()) @updatedAt @map("updated_at")
  containers   ProductContainer[]
  pedido       pedido[]
  Address      Address[]
  cart         cart[]
  review       review[]
  epaycoConfig EpaycoConfig?
  bankAccounts BankAccount[] // Cuentas bancarias del vendedor
  vendorPayouts VendorPayout[] // Pagos recibidos como vendedor

  @@index([email])
}

model ProductContainer {
  id        Int       @id @default(autoincrement())
  name      String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  products  Product[]

  @@index([userId])
}

model EpaycoConfig {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publicKey  String // Token público de ePayco del vendedor
  privateKey String? // Token privado (opcional, encriptado)
  isTestMode Boolean  @default(true)
  isActive   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  sku             String
  quantity        Int
  price           Decimal           @db.Decimal(12, 2)
  minStock        Int               @default(0)
  isActive        Boolean           @default(true)
  description     String?
  containerId     Int
  container       ProductContainer  @relation(fields: [containerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  unidadId        Int?
  marcaId         Int?
  unidad          unidad?           @relation(fields: [unidadId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  marca           marca?            @relation(fields: [marcaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  ProductCategory ProductCategory[]
  ProductImage    ProductImage[]
  cart_item       cart_item[]
  review          review[]
  pedido_producto detalle_pedido[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt

  @@unique([containerId, sku])
  @@index([isActive])
  @@index([containerId])
  @@index([unidadId])
  @@index([marcaId])
}

model unidad {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model marca {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model pedido {
  id              Int              @id @default(autoincrement())
  status          OrderStatus      @default(PENDING)
  precio_total    Decimal          @db.Decimal(12, 2)
  userId          Int
  user            User             @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  pedido_producto detalle_pedido[]
  pedido_address  pedido_address[]
  payment         payment[]
  shipment        shipment[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@index([userId, createdAt])
}

model detalle_pedido {
  id             Int      @id @default(autoincrement())
  pedidoId       Int
  productoId     Int
  cantidad       Int
  subtotal       Decimal  @db.Decimal(12, 2)
  nameAtPurchase String
  skuAtPurchase  String
  priceUnit      Decimal  @db.Decimal(12, 2)
  pedido         pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  producto       Product  @relation(fields: [productoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt      DateTime @default(now())

  @@index([pedidoId])
  @@index([productoId])
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name      String?
  fullName  String
  phone     String
  line1     String
  line2     String?
  city      String
  state     String?
  country   String   @default("CO")
  zip       String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isDefault])
}

model pedido_address {
  id        Int         @id @default(autoincrement())
  pedidoId  Int
  pedido    pedido      @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fullName  String
  phone     String
  line1     String
  line2     String?
  city      String
  state     String?
  country   String
  zip       String?
  type      AddressType @default(SHIPPING)
  createdAt DateTime    @default(now())

  @@index([pedidoId, type])
}

model shipment {
  id            Int            @id @default(autoincrement())
  pedidoId      Int
  pedido        pedido         @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status        ShipmentStatus @default(PENDING)
  carrier       String?
  trackingCode  String?
  cost          Decimal?       @db.Decimal(12, 2)
  estimatedDate DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime       @default(now())

  @@index([pedidoId, status])
}

model payment {
  id             Int           @id @default(autoincrement())
  pedidoId       Int
  pedido         pedido        @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  method         PaymentMethod @default(TRANSFER)
  status         PaymentStatus @default(PENDING)
  amount         Decimal       @db.Decimal(12, 2)
  currency       String        @default("COP")
  provider       String?
  providerRef    String? // Referencia de transacción de ePayco
  evidenceUrl    String?
  containerId    Int? // ID del vendedor que recibe el pago
  epaycoResponse String? // Respuesta completa de ePayco en JSON
  createdAt      DateTime      @default(now())

  @@index([pedidoId, status])
  @@index([containerId])
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  slug      String            @unique
  parentId  Int?
  parent    Category?         @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  children  Category[]        @relation("CategoryToCategory")
  products  ProductCategory[]
  createdAt DateTime          @default(now())

  @@index([parentId])
}

model ProductCategory {
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([productId, categoryId])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  base64    String
  alt       String?
  position  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([productId, position])
}

model cart {
  id        Int         @id @default(autoincrement())
  userId    Int?
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     cart_item[]
}

model cart_item {
  id         Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  qty        Int      @default(1)
  priceAtAdd Decimal  @db.Decimal(12, 2)
  cart       cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([productId])
}

model review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
  @@index([rating])
}

enum AddressType {
  SHIPPING
  BILLING
}

enum Role {
  SELLER
  BUYER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
  SHIPPED
  DELIVERED
  REFUNDED
}

enum PaymentMethod {
  CASH
  TRANSFER
  CARD
  GATEWAY
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

enum ShipmentStatus {
  NOT_REQUIRED
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
}

// ============================================
// NUEVOS MODELOS PARA SISTEMA DE DISPERSIÓN
// ============================================

// Cuentas bancarias de los vendedores
model BankAccount {
  id              Int      @id @default(autoincrement())
  userId          Int      // Vendedor propietario de la cuenta
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bankName        String   // Nombre del banco (ej: Bancolombia, Davivienda)
  accountType     AccountType // Tipo de cuenta (AHORROS, CORRIENTE)
  accountNumber   String   // Número de cuenta bancaria
  holderName      String   // Nombre del titular de la cuenta
  holderDocument  String   // Documento del titular (CC, NIT)
  documentType    DocumentType @default(CC)
  isActive        Boolean  @default(true) // Solo una cuenta activa por vendedor
  isVerified      Boolean  @default(false) // Verificación manual por admin
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, isActive])
  @@index([userId])
}

// Configuración global del sistema de dispersión (una sola fila)
model DispersionConfig {
  id                  Int      @id @default(autoincrement())
  dispersalFrequency  Int      @default(7) // Días entre dispersiones (ej: 7, 15, 30)
  adminCommission     Decimal  @db.Decimal(5, 2) @default(10.00) // Comisión del admin en porcentaje (ej: 10.00 = 10%)
  minimumPayout       Decimal  @db.Decimal(12, 2) @default(50000) // Mínimo para dispersar (en COP)
  isAutoDispersalOn   Boolean  @default(true) // Activar/desactivar dispersiones automáticas
  lastDispersalDate   DateTime? // Última fecha de dispersión ejecutada
  nextDispersalDate   DateTime? // Próxima fecha programada
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Registro de dispersiones/pagos realizados a vendedores
model VendorPayout {
  id              Int           @id @default(autoincrement())
  vendorId        Int           // ID del vendedor que recibe el pago
  vendor          User          @relation(fields: [vendorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  amount          Decimal       @db.Decimal(12, 2) // Monto a dispersar
  adminCommission Decimal       @db.Decimal(12, 2) // Comisión retenida por el admin
  netAmount       Decimal       @db.Decimal(12, 2) // Monto neto transferido al vendedor
  status          PayoutStatus  @default(PENDING)
  paymentIds      String?       // IDs de payments incluidos (JSON array)
  bankAccount     String?       // Snapshot de cuenta bancaria usada (JSON)
  epaycoReference String?       // Referencia de la transferencia en ePayco
  epaycoResponse  String?       // Respuesta completa de ePayco (JSON)
  errorMessage    String?       // Mensaje de error si falla
  processedAt     DateTime?     // Fecha de procesamiento exitoso
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([vendorId, status])
  @@index([vendorId, createdAt])
  @@index([status])
}

enum AccountType {
  AHORROS
  CORRIENTE
}

enum DocumentType {
  CC  // Cédula de Ciudadanía
  CE  // Cédula de Extranjería
  NIT // Número de Identificación Tributaria
  PP  // Pasaporte
}

enum PayoutStatus {
  PENDING      // Pendiente de procesamiento
  PROCESSING   // En proceso de transferencia
  COMPLETED    // Completado exitosamente
  FAILED       // Falló la transferencia
  CANCELLED    // Cancelado manualmente
}
